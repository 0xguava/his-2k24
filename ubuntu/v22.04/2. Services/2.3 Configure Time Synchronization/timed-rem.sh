#!/bin/bash

daemon-rem() {
  # Check for arguments
  if [ "$#" -ne 1 ]; then
    echo "Usage: $0 --chrony | --timesyncd"
    exit 1
  fi

  # Determine the selected daemon
  case "$1" in
  --chrony)
    echo "Configuring Chrony for time synchronization..."

    # Install Chrony
    echo "Installing chrony..."
    if apt install -y chrony; then
      echo "Chrony installed successfully."
    else
      echo "Failed to install Chrony."
      exit 1
    fi

    # Stop and mask systemd-timesyncd
    echo "Stopping and masking systemd-timesyncd..."
    systemctl stop systemd-timesyncd.service
    systemctl mask systemd-timesyncd.service

    echo "Chrony is now configured for time synchronization."
    ;;
  --timesyncd)
    echo "Configuring systemd-timesyncd for time synchronization..."

    # Remove Chrony
    echo "Removing Chrony..."
    if apt purge -y chrony && apt autoremove -y; then
      echo "Chrony removed successfully."
    else
      echo "Failed to remove Chrony."
      exit 1
    fi

    # Enable and start systemd-timesyncd
    echo "Enabling and starting systemd-timesyncd..."
    systemctl unmask systemd-timesyncd.service
    systemctl enable systemd-timesyncd.service
    systemctl start systemd-timesyncd.service

    echo "systemd-timesyncd is now configured for time synchronization."
    ;;
  *)
    echo "Invalid option. Use --chrony or --timesyncd."
    exit 1
    ;;
  esac
}

timesyncd-rem() {
  TIMESYNCD_CONF_DIR="/etc/systemd/timesyncd.conf.d"
  DROP_IN_FILE="${TIMESYNCD_CONF_DIR}/60timesyncd.conf"
  BACKUP_FILE="${DROP_IN_FILE}.bak"

  if [ ! -d "$TIMESYNCD_CONF_DIR" ]; then
    echo "Creating directory: $TIMESYNCD_CONF_DIR"
    mkdir -p "$TIMESYNCD_CONF_DIR"
  fi

  if [ -f "$DROP_IN_FILE" ]; then
    echo "Creating backup of existing configuration file: $BACKUP_FILE"
    cp "$DROP_IN_FILE" "$BACKUP_FILE"
  fi

  echo "Updating time synchronization settings in $DROP_IN_FILE..."
  cat <<EOF > "$DROP_IN_FILE"
[Time]
NTP=time.nist.gov
FallbackNTP=time-a-g.nist.gov time-b-g.nist.gov time-c-g.nist.gov
EOF

  echo "Reloading or restarting systemd-journald..."
  if systemctl reload-or-restart systemd-journald; then
    echo "Systemd-journald successfully reloaded or restarted."
  else
    echo "Failed to reload or restart systemd-journald. Check the service status for details."
    exit 1
  fi

  echo "Time synchronization configuration updated successfully."
}

chrony-timeserver-rem() {
  CHRONY_CONF="/etc/chrony/chrony.conf"
  SOURCES_DIR="/etc/chrony/sources.d"
  SOURCES_FILE="${SOURCES_DIR}/custom.sources"
  BACKUP_SUFFIX=".bak"

  if [ ! -d "$SOURCES_DIR" ]; then
    echo "Creating directory: $SOURCES_DIR"
    mkdir -p "$SOURCES_DIR"
  fi

  if ! grep -qE '^sourcedir[[:space:]]+/etc/chrony/sources.d' "$CHRONY_CONF"; then
    echo "'sourcedir' option not found in $CHRONY_CONF. Adding it..."
    cp "$CHRONY_CONF" "${CHRONY_CONF}${BACKUP_SUFFIX}"
    echo "Creating backup: ${CHRONY_CONF}${BACKUP_SUFFIX}"
    echo "sourcedir /etc/chrony/sources.d" >> "$CHRONY_CONF"
  else
    echo "'sourcedir' option already exists in $CHRONY_CONF."
  fi

  if [ -f "$SOURCES_FILE" ]; then
    BACKUP_FILE="${SOURCES_FILE}${BACKUP_SUFFIX}"
    echo "Creating backup of existing sources file: $BACKUP_FILE"
    cp "$SOURCES_FILE" "$BACKUP_FILE"
  fi

  echo "Updating time sources in $SOURCES_FILE..."
  cat <<EOF > "$SOURCES_FILE"
# Custom time synchronization configuration
# Generated by configure_chrony_sources script
pool time.nist.gov iburst maxsources 4
server time-a-g.nist.gov iburst
server 132.163.97.3 iburst
server time-d-b.nist.gov iburst
EOF

  echo "Restarting chronyd to apply changes..."
  if systemctl restart chronyd; then
    echo "Chronyd restarted successfully."
  else
    echo "Failed to restart chronyd. Check the service status for details."
    exit 1
  fi

  echo "Chrony configuration and sources updated successfully."
}

chrony-user-rem() {
  CHRONY_CONF="/etc/chrony/chrony.conf"
  CONF_DIR="/etc/chrony/conf.d"
  BACKUP_SUFFIX=".bak"

  if [ ! -d "$CONF_DIR" ]; then
      echo "Creating directory: $CONF_DIR"
      mkdir -p "$CONF_DIR"
  fi

  if grep -qE '^user[[:space:]]+_chrony' "$CHRONY_CONF"; then
      echo "'user _chrony' already exists in $CHRONY_CONF."
  else
      echo "Adding 'user _chrony' to $CHRONY_CONF..."
      cp "$CHRONY_CONF" "$CHRONY_CONF$BACKUP_SUFFIX"
      echo "Backup created: $CHRONY_CONF$BACKUP_SUFFIX"
      echo "user _chrony" >> "$CHRONY_CONF"
  fi

  for conf_file in "$CONF_DIR"/*.conf; do
      if [ -f "$conf_file" ]; then
          if grep -qE '^user[[:space:]]+_chrony' "$conf_file"; then
              echo "'user _chrony' already exists in $conf_file."
          else
              echo "Adding 'user _chrony' to $conf_file..."
              cp "$conf_file" "$conf_file$BACKUP_SUFFIX"
              echo "Backup created: $conf_file$BACKUP_SUFFIX"
              echo "user _chrony" >> "$conf_file"
          fi
      fi
  done

  if [ -z "$(ls -A $CONF_DIR/*.conf 2>/dev/null)" ]; then
      NEW_CONF_FILE="$CONF_DIR/custom.conf"
      echo "No .conf files found in $CONF_DIR. Creating $NEW_CONF_FILE..."
      echo "user _chrony" > "$NEW_CONF_FILE"
  fi

  echo "Chrony user configuration updated successfully."
}

daemon-rem $@

if [[ "$@" = "--chrony" ]]; then 
  echo -e "\n- Remediation for chrony timeserver:"
  chrony-timeserver-rem
  echo -e "\n- Remediation for chrony user:"
  chrony-user-rem
else 
  echo -e "\n- Remediation for systemd-timesyncd timeserver:"
  timesyncd-rem 
fi


